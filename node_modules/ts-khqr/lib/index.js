"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.KHQR = exports.COUNTRY = exports.TAG = exports.CURRENCY = void 0;
const constants_1 = require("./constants");
const generate_1 = require("./generate");
const parser_1 = require("./parser");
const utils_1 = require("./utils");
const verify_1 = require("./verify");
var constants_2 = require("./constants");
Object.defineProperty(exports, "CURRENCY", { enumerable: true, get: function () { return constants_2.CURRENCY; } });
Object.defineProperty(exports, "TAG", { enumerable: true, get: function () { return constants_2.TAG; } });
Object.defineProperty(exports, "COUNTRY", { enumerable: true, get: function () { return constants_2.COUNTRY; } });
class KHQR {
    static generate(payload) {
        return (0, generate_1.generateQR)(payload);
    }
    static verify(qrString) {
        // Check CRC
        const crcRegExp = /6304[A-Fa-f0-9]{4}$/;
        if (!crcRegExp.test(qrString)) {
            return { isValid: false };
        }
        const crc = qrString.slice(-4);
        const KHQRNoCrc = qrString.slice(0, -4);
        const validCRC = (0, utils_1.crc16)(KHQRNoCrc) === crc.toUpperCase();
        try {
            if (!validCRC || qrString.length < constants_1.EMV.INVALID_LENGTH.KHQR) {
                throw (0, utils_1.response)(null, constants_1.ERROR_CODE.KHQR_INVALID);
            }
            (0, verify_1.verifyQR)(qrString);
            return { isValid: true };
        }
        catch (error) {
            return { isValid: false };
        }
    }
    static parse(qrString) {
        if (utils_1.StringUtils.isEmpty(qrString)) {
            return (0, utils_1.response)(null, constants_1.ERROR_CODE.KHQR_INVALID);
        }
        return (0, utils_1.response)((0, parser_1.parseQR)(qrString));
    }
}
exports.KHQR = KHQR;
