"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AdditionalData = void 0;
const constants_1 = require("../../constants");
const tag_length_string_1 = require("./base/tag-length-string");
const utils_1 = require("../../utils");
class AdditionalData extends tag_length_string_1.TagLengthString {
    constructor(tag, additionalData = {}) {
        let billNumber;
        let mobileNumber;
        let storeLabel;
        let terminalLabel;
        let purposeOfTransaction;
        // Create additional data tag by combine all three sub tags
        let additionalDataString = '';
        // note: check like this for compatible with bakong-khqr sdk
        if (additionalData.billNumber !== undefined && additionalData.billNumber !== null) {
            billNumber = new BillNumber(constants_1.EMV.BILLNUMBER_TAG, additionalData.billNumber);
            additionalDataString += billNumber.toString();
        }
        if (additionalData.mobileNumber !== undefined && additionalData.mobileNumber !== null) {
            mobileNumber = new MobileNumber(constants_1.EMV.ADDITIONAL_DATA_FIELD_MOBILE_NUMBER, additionalData.mobileNumber);
            additionalDataString += mobileNumber.toString();
        }
        if (additionalData.storeLabel !== undefined && additionalData.storeLabel !== null) {
            storeLabel = new StoreLabel(constants_1.EMV.STORELABEL_TAG, additionalData.storeLabel);
            additionalDataString += storeLabel.toString();
        }
        if (additionalData.terminalLabel !== undefined && additionalData.terminalLabel !== null) {
            terminalLabel = new TerminalLabel(constants_1.EMV.TERMINAL_TAG, additionalData.terminalLabel);
            additionalDataString += terminalLabel.toString();
        }
        if (additionalData.purposeOfTransaction !== undefined && additionalData.purposeOfTransaction !== null) {
            purposeOfTransaction = new PurposeOfTransaction(constants_1.EMV.PURPOSE_OF_TRANSACTION, additionalData.purposeOfTransaction);
            additionalDataString += purposeOfTransaction.toString();
        }
        super(tag, additionalDataString);
        // class inherit the billNumber, storeLabel, terminalLabel
        this.billNumber = billNumber;
        this.mobileNumber = mobileNumber;
        this.storeLabel = storeLabel;
        this.terminalLabel = terminalLabel;
        this.purposeOfTransaction = purposeOfTransaction;
        this.data = {
            billNumber,
            mobileNumber,
            storeLabel,
            terminalLabel,
            purposeOfTransaction,
        };
    }
}
exports.AdditionalData = AdditionalData;
class BillNumber extends tag_length_string_1.TagLengthString {
    constructor(tag, value) {
        if (utils_1.StringUtils.isEmpty(value) || String(value).length > constants_1.EMV.INVALID_LENGTH.BILL_NUMBER) {
            throw (0, utils_1.response)(null, constants_1.ERROR_CODE.BILL_NUMBER_LENGTH_INVALID);
        }
        super(tag, String(value));
    }
}
class StoreLabel extends tag_length_string_1.TagLengthString {
    constructor(tag, value) {
        if (utils_1.StringUtils.isEmpty(value) || String(value).length > constants_1.EMV.INVALID_LENGTH.STORE_LABEL) {
            throw (0, utils_1.response)(null, constants_1.ERROR_CODE.STORE_LABEL_LENGTH_INVALID);
        }
        super(tag, String(value));
    }
}
class TerminalLabel extends tag_length_string_1.TagLengthString {
    constructor(tag, value) {
        if (utils_1.StringUtils.isEmpty(value) || String(value).length > constants_1.EMV.INVALID_LENGTH.TERMINAL_LABEL) {
            throw (0, utils_1.response)(null, constants_1.ERROR_CODE.TERMINAL_LABEL_LENGTH_INVALID);
        }
        super(tag, String(value));
    }
}
class MobileNumber extends tag_length_string_1.TagLengthString {
    constructor(tag, value) {
        if (utils_1.StringUtils.isEmpty(value) || String(value).length > constants_1.EMV.INVALID_LENGTH.MOBILE_NUMBER) {
            throw (0, utils_1.response)(null, constants_1.ERROR_CODE.MOBILE_NUMBER_LENGTH_INVALID);
        }
        super(tag, String(value));
    }
}
class PurposeOfTransaction extends tag_length_string_1.TagLengthString {
    constructor(tag, value) {
        if (utils_1.StringUtils.isEmpty(value) || String(value).length > constants_1.EMV.INVALID_LENGTH.PURPOSE_OF_TRANSACTION)
            throw (0, utils_1.response)(null, constants_1.ERROR_CODE.PURPOSE_OF_TRANSACTION_LENGTH_INVALID);
        super(tag, String(value));
    }
}
