"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.GlobalUniqueIdentifier = void 0;
const constants_1 = require("../../constants");
const utils_1 = require("../../utils");
const tag_length_string_1 = require("./base/tag-length-string");
class GlobalUniqueIdentifier extends tag_length_string_1.TagLengthString {
    constructor(tag, obj) {
        if (!obj || typeof obj !== 'object') {
            throw (0, utils_1.response)(null, constants_1.ERROR_CODE.MERCHANT_TYPE_REQUIRED);
        }
        // Creating 3 instances
        // BakongAccountID: 00
        // MerchantID: 01
        // AcquiringBankName: 02
        const bakongAccountID = new BakongAccountID(constants_1.EMV.BAKONG_ACCOUNT_IDENTIFIER, obj.bakongAccountID);
        let globalUniqueIdentifier = bakongAccountID.toString();
        if (obj.isMerchant) {
            const merchantID = new MerchantID(constants_1.EMV.MERCHANT_ACCOUNT_INFORMATION_MERCHANT_ID, obj.merchantID);
            const acquiringBank = new AcquiringBank(constants_1.EMV.MERCHANT_ACCOUNT_INFORMATION_ACQUIRING_BANK, obj.acquiringBank);
            if (obj.merchantID !== undefined && obj.merchantID !== null) {
                globalUniqueIdentifier += merchantID.toString();
            }
            if (obj.acquiringBank !== undefined && obj.acquiringBank !== null) {
                globalUniqueIdentifier += acquiringBank.toString();
            }
            super(tag, globalUniqueIdentifier);
            this.merchantID = merchantID;
            this.acquiringBank = acquiringBank;
            this.data = {
                bakongAccountID,
                merchantID,
                acquiringBank,
            };
        }
        else {
            // note: check like this for compatible with bakong-khqr sdk
            if (!utils_1.StringUtils.isEmpty(obj.accountInformation)) {
                const accInformation = new AccountInformation(constants_1.EMV.INDIVIDUAL_ACCOUNT_INFORMATION, String(obj.accountInformation));
                globalUniqueIdentifier += accInformation.toString();
            }
            if (!utils_1.StringUtils.isEmpty(obj.acquiringBank)) {
                const acquiringBank = new AcquiringBank(constants_1.EMV.MERCHANT_ACCOUNT_INFORMATION_ACQUIRING_BANK, obj.acquiringBank);
                globalUniqueIdentifier += acquiringBank.toString();
            }
            super(tag, globalUniqueIdentifier);
            this.accountInformation = obj.accountInformation;
            this.data = {
                bakongAccountID,
                accountInformation: obj.accountInformation,
            };
        }
        this.bakongAccountID = bakongAccountID;
    }
}
exports.GlobalUniqueIdentifier = GlobalUniqueIdentifier;
class BakongAccountID extends tag_length_string_1.TagLengthString {
    constructor(tag, bakongAccountID) {
        // Throw validation if there is
        // 1. No tag
        // 2. empty value of bakong account
        if (utils_1.StringUtils.isEmpty(bakongAccountID)) {
            throw (0, utils_1.response)(null, constants_1.ERROR_CODE.BAKONG_ACCOUNT_ID_REQUIRED);
        }
        // Validating the bakong account is it is correct
        // name@bank_domain
        const bakongAccountDivide = String(bakongAccountID).split('@');
        // Validate on length of the bakong account
        if (String(bakongAccountID).length > constants_1.EMV.INVALID_LENGTH.BAKONG_ACCOUNT) {
            throw (0, utils_1.response)(null, constants_1.ERROR_CODE.BAKONG_ACCOUNT_ID_LENGTH_INVALID);
        }
        else if (bakongAccountDivide.length < 2) {
            throw (0, utils_1.response)(null, constants_1.ERROR_CODE.BAKONG_ACCOUNT_ID_INVALID);
        }
        super(tag, String(bakongAccountID));
    }
}
class MerchantID extends tag_length_string_1.TagLengthString {
    constructor(tag, value) {
        if (utils_1.StringUtils.isEmpty(value)) {
            throw (0, utils_1.response)(null, constants_1.ERROR_CODE.MERCHANT_ID_REQUIRED);
        }
        else if (String(value).length > constants_1.EMV.INVALID_LENGTH.MERCHANT_ID) {
            throw (0, utils_1.response)(null, constants_1.ERROR_CODE.MERCHANT_ID_LENGTH_INVALID);
        }
        super(tag, String(value));
    }
}
class AcquiringBank extends tag_length_string_1.TagLengthString {
    constructor(tag, value) {
        if (utils_1.StringUtils.isEmpty(value)) {
            throw (0, utils_1.response)(null, constants_1.ERROR_CODE.ACQUIRING_BANK_REQUIRED);
        }
        else if (String(value).length > constants_1.EMV.INVALID_LENGTH.ACQUIRING_BANK) {
            throw (0, utils_1.response)(null, constants_1.ERROR_CODE.ACQUIRING_BANK_LENGTH_INVALID);
        }
        super(tag, String(value));
    }
}
class AccountInformation extends tag_length_string_1.TagLengthString {
    constructor(tag, value) {
        if (value.length > constants_1.EMV.INVALID_LENGTH.ACCOUNT_INFORMATION) {
            throw (0, utils_1.response)(null, constants_1.ERROR_CODE.ACCOUNT_INFORMATION_LENGTH_INVALID);
        }
        super(tag, value);
    }
}
