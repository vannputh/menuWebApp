"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.generateQR = void 0;
const constants_1 = require("./constants");
const models_1 = require("./models");
const utils_1 = require("./utils");
const md5_1 = __importDefault(require("md5"));
function generateQR(payload) {
    let merchantInfo;
    if (payload.tag === constants_1.TAG.MERCHANT) {
        merchantInfo = {
            bakongAccountID: payload.accountID,
            merchantID: payload.merchantID,
            acquiringBank: payload.acquiringBank,
            isMerchant: true,
        };
    }
    else {
        merchantInfo = {
            bakongAccountID: payload.accountID,
            accountInformation: payload.merchantID,
            acquiringBank: payload.acquiringBank,
            isMerchant: false,
        };
    }
    try {
        // tag 00
        const payloadFormatIndicator = new models_1.PayloadFormatIndicator(constants_1.EMV.PAYLOAD_FORMAT_INDICATOR, constants_1.EMV.DEFAULT_PAYLOAD_FORMAT_INDICATOR);
        // Static QR is when QR Code has no amount tag
        // in this case the amount is 0
        let QRType = constants_1.EMV.DYNAMIC_QR;
        if (!payload.amount) {
            QRType = constants_1.EMV.STATIC_QR;
        }
        // tag 01
        const pointOfInitiationMethod = new models_1.PointOfInitiationMethod(constants_1.EMV.POINT_OF_INITIATION_METHOD, QRType);
        let upi;
        if (payload.upiMerchantAccount) {
            // tag 15
            upi = new models_1.UnionpayMerchantAccount(constants_1.EMV.UNIONPAY_MERCHANT_ACCOUNT, payload.upiMerchantAccount);
        }
        // tag MID 26-51
        const globalUniqueIdentifier = new models_1.GlobalUniqueIdentifier(payload.tag, merchantInfo);
        // tag 52
        const merchantCategoryCode = new models_1.MerchantCategoryCode(constants_1.EMV.MERCHANT_CATEGORY_CODE, constants_1.EMV.DEFAULT_MERCHANT_CATEGORY_CODE);
        const { countryCode = constants_1.EMV.DEFAULT_COUNTRY_CODE, merchantCity = constants_1.EMV.DEFAULT_MERCHANT_CITY, currency = constants_1.CURRENCY.KHR, additionalData, languageData, } = payload;
        // tag 53
        const trxnCurrency = new models_1.TransactionCurrency(constants_1.EMV.TRANSACTION_CURRENCY, currency);
        // Array of KHQR tags to loop and get the string of tags
        const KHQRInstances = [
            payloadFormatIndicator,
            pointOfInitiationMethod,
            upi || '',
            globalUniqueIdentifier,
            merchantCategoryCode,
            trxnCurrency,
        ];
        if (payload.amount) {
            let amountInput = String(payload.amount);
            if (currency === constants_1.CURRENCY.KHR) {
                if (payload.amount % 1 === 0) {
                    amountInput = String(Math.round(payload.amount));
                }
                else {
                    throw (0, utils_1.response)(null, constants_1.ERROR_CODE.TRANSACTION_AMOUNT_INVALID);
                }
            }
            else {
                const amountSplit = String(payload.amount).split('.');
                const precision = amountSplit[1];
                if (precision !== undefined && precision.length > 2) {
                    throw (0, utils_1.response)(null, constants_1.ERROR_CODE.TRANSACTION_AMOUNT_INVALID);
                }
                if (precision !== undefined) {
                    amountInput = parseFloat(amountInput).toFixed(2);
                }
            }
            // tag 54
            KHQRInstances.push(new models_1.TransactionAmount(constants_1.EMV.TRANSACTION_AMOUNT, amountInput));
        }
        // tag 58
        KHQRInstances.push(new models_1.CountryCode(constants_1.EMV.COUNTRY_CODE, countryCode));
        // tag 59
        KHQRInstances.push(new models_1.MerchantName(constants_1.EMV.MERCHANT_NAME, payload.merchantName));
        // tag 60
        KHQRInstances.push(new models_1.MerchantCity(constants_1.EMV.MERCHANT_CITY, merchantCity));
        if (additionalData) {
            const isEmpty = Object.values(additionalData).every((el) => utils_1.StringUtils.isEmpty(el));
            if (!isEmpty) {
                // tag 62
                KHQRInstances.push(new models_1.AdditionalData(constants_1.EMV.ADDITIONAL_DATA_TAG, additionalData));
            }
        }
        if (languageData) {
            const isEmpty = Object.values(languageData).every((el) => utils_1.StringUtils.isEmpty(el));
            if (!isEmpty) {
                // tag 64
                KHQRInstances.push(new models_1.MerchantInformationLanguageTemplate(constants_1.EMV.MERCHANT_INFORMATION_LANGUAGE_TEMPLATE, languageData));
            }
        }
        // tag 99
        KHQRInstances.push(new models_1.TimeStamp(constants_1.EMV.TIMESTAMP_TAG));
        let khqrNoCrc = '';
        KHQRInstances.forEach((item) => {
            khqrNoCrc += item.toString();
        });
        let khqr = khqrNoCrc + constants_1.EMV.CRC + constants_1.EMV.CRC_LENGTH;
        khqr += (0, utils_1.crc16)(khqr);
        return (0, utils_1.response)({
            qr: khqr,
            md5: (0, md5_1.default)(khqr),
        });
    }
    catch (error) {
        return error;
    }
}
exports.generateQR = generateQR;
