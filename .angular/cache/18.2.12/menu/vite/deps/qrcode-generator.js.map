{
  "version": 3,
  "sources": ["../../../../../../node_modules/qrcode-generator/qrcode.js"],
  "sourcesContent": ["//---------------------------------------------------------------------\n//\n// QR Code Generator for JavaScript\n//\n// Copyright (c) 2009 Kazuhiko Arase\n//\n// URL: http://www.d-project.com/\n//\n// Licensed under the MIT license:\n//  http://www.opensource.org/licenses/mit-license.php\n//\n// The word 'QR Code' is registered trademark of\n// DENSO WAVE INCORPORATED\n//  http://www.denso-wave.com/qrcode/faqpatent-e.html\n//\n//---------------------------------------------------------------------\n\nvar qrcode = function () {\n  //---------------------------------------------------------------------\n  // qrcode\n  //---------------------------------------------------------------------\n\n  /**\n   * qrcode\n   * @param typeNumber 1 to 40\n   * @param errorCorrectionLevel 'L','M','Q','H'\n   */\n  var qrcode = function (typeNumber, errorCorrectionLevel) {\n    var PAD0 = 0xEC;\n    var PAD1 = 0x11;\n    var _typeNumber = typeNumber;\n    var _errorCorrectionLevel = QRErrorCorrectionLevel[errorCorrectionLevel];\n    var _modules = null;\n    var _moduleCount = 0;\n    var _dataCache = null;\n    var _dataList = [];\n    var _this = {};\n    var makeImpl = function (test, maskPattern) {\n      _moduleCount = _typeNumber * 4 + 17;\n      _modules = function (moduleCount) {\n        var modules = new Array(moduleCount);\n        for (var row = 0; row < moduleCount; row += 1) {\n          modules[row] = new Array(moduleCount);\n          for (var col = 0; col < moduleCount; col += 1) {\n            modules[row][col] = null;\n          }\n        }\n        return modules;\n      }(_moduleCount);\n      setupPositionProbePattern(0, 0);\n      setupPositionProbePattern(_moduleCount - 7, 0);\n      setupPositionProbePattern(0, _moduleCount - 7);\n      setupPositionAdjustPattern();\n      setupTimingPattern();\n      setupTypeInfo(test, maskPattern);\n      if (_typeNumber >= 7) {\n        setupTypeNumber(test);\n      }\n      if (_dataCache == null) {\n        _dataCache = createData(_typeNumber, _errorCorrectionLevel, _dataList);\n      }\n      mapData(_dataCache, maskPattern);\n    };\n    var setupPositionProbePattern = function (row, col) {\n      for (var r = -1; r <= 7; r += 1) {\n        if (row + r <= -1 || _moduleCount <= row + r) continue;\n        for (var c = -1; c <= 7; c += 1) {\n          if (col + c <= -1 || _moduleCount <= col + c) continue;\n          if (0 <= r && r <= 6 && (c == 0 || c == 6) || 0 <= c && c <= 6 && (r == 0 || r == 6) || 2 <= r && r <= 4 && 2 <= c && c <= 4) {\n            _modules[row + r][col + c] = true;\n          } else {\n            _modules[row + r][col + c] = false;\n          }\n        }\n      }\n    };\n    var getBestMaskPattern = function () {\n      var minLostPoint = 0;\n      var pattern = 0;\n      for (var i = 0; i < 8; i += 1) {\n        makeImpl(true, i);\n        var lostPoint = QRUtil.getLostPoint(_this);\n        if (i == 0 || minLostPoint > lostPoint) {\n          minLostPoint = lostPoint;\n          pattern = i;\n        }\n      }\n      return pattern;\n    };\n    var setupTimingPattern = function () {\n      for (var r = 8; r < _moduleCount - 8; r += 1) {\n        if (_modules[r][6] != null) {\n          continue;\n        }\n        _modules[r][6] = r % 2 == 0;\n      }\n      for (var c = 8; c < _moduleCount - 8; c += 1) {\n        if (_modules[6][c] != null) {\n          continue;\n        }\n        _modules[6][c] = c % 2 == 0;\n      }\n    };\n    var setupPositionAdjustPattern = function () {\n      var pos = QRUtil.getPatternPosition(_typeNumber);\n      for (var i = 0; i < pos.length; i += 1) {\n        for (var j = 0; j < pos.length; j += 1) {\n          var row = pos[i];\n          var col = pos[j];\n          if (_modules[row][col] != null) {\n            continue;\n          }\n          for (var r = -2; r <= 2; r += 1) {\n            for (var c = -2; c <= 2; c += 1) {\n              if (r == -2 || r == 2 || c == -2 || c == 2 || r == 0 && c == 0) {\n                _modules[row + r][col + c] = true;\n              } else {\n                _modules[row + r][col + c] = false;\n              }\n            }\n          }\n        }\n      }\n    };\n    var setupTypeNumber = function (test) {\n      var bits = QRUtil.getBCHTypeNumber(_typeNumber);\n      for (var i = 0; i < 18; i += 1) {\n        var mod = !test && (bits >> i & 1) == 1;\n        _modules[Math.floor(i / 3)][i % 3 + _moduleCount - 8 - 3] = mod;\n      }\n      for (var i = 0; i < 18; i += 1) {\n        var mod = !test && (bits >> i & 1) == 1;\n        _modules[i % 3 + _moduleCount - 8 - 3][Math.floor(i / 3)] = mod;\n      }\n    };\n    var setupTypeInfo = function (test, maskPattern) {\n      var data = _errorCorrectionLevel << 3 | maskPattern;\n      var bits = QRUtil.getBCHTypeInfo(data);\n\n      // vertical\n      for (var i = 0; i < 15; i += 1) {\n        var mod = !test && (bits >> i & 1) == 1;\n        if (i < 6) {\n          _modules[i][8] = mod;\n        } else if (i < 8) {\n          _modules[i + 1][8] = mod;\n        } else {\n          _modules[_moduleCount - 15 + i][8] = mod;\n        }\n      }\n\n      // horizontal\n      for (var i = 0; i < 15; i += 1) {\n        var mod = !test && (bits >> i & 1) == 1;\n        if (i < 8) {\n          _modules[8][_moduleCount - i - 1] = mod;\n        } else if (i < 9) {\n          _modules[8][15 - i - 1 + 1] = mod;\n        } else {\n          _modules[8][15 - i - 1] = mod;\n        }\n      }\n\n      // fixed module\n      _modules[_moduleCount - 8][8] = !test;\n    };\n    var mapData = function (data, maskPattern) {\n      var inc = -1;\n      var row = _moduleCount - 1;\n      var bitIndex = 7;\n      var byteIndex = 0;\n      var maskFunc = QRUtil.getMaskFunction(maskPattern);\n      for (var col = _moduleCount - 1; col > 0; col -= 2) {\n        if (col == 6) col -= 1;\n        while (true) {\n          for (var c = 0; c < 2; c += 1) {\n            if (_modules[row][col - c] == null) {\n              var dark = false;\n              if (byteIndex < data.length) {\n                dark = (data[byteIndex] >>> bitIndex & 1) == 1;\n              }\n              var mask = maskFunc(row, col - c);\n              if (mask) {\n                dark = !dark;\n              }\n              _modules[row][col - c] = dark;\n              bitIndex -= 1;\n              if (bitIndex == -1) {\n                byteIndex += 1;\n                bitIndex = 7;\n              }\n            }\n          }\n          row += inc;\n          if (row < 0 || _moduleCount <= row) {\n            row -= inc;\n            inc = -inc;\n            break;\n          }\n        }\n      }\n    };\n    var createBytes = function (buffer, rsBlocks) {\n      var offset = 0;\n      var maxDcCount = 0;\n      var maxEcCount = 0;\n      var dcdata = new Array(rsBlocks.length);\n      var ecdata = new Array(rsBlocks.length);\n      for (var r = 0; r < rsBlocks.length; r += 1) {\n        var dcCount = rsBlocks[r].dataCount;\n        var ecCount = rsBlocks[r].totalCount - dcCount;\n        maxDcCount = Math.max(maxDcCount, dcCount);\n        maxEcCount = Math.max(maxEcCount, ecCount);\n        dcdata[r] = new Array(dcCount);\n        for (var i = 0; i < dcdata[r].length; i += 1) {\n          dcdata[r][i] = 0xff & buffer.getBuffer()[i + offset];\n        }\n        offset += dcCount;\n        var rsPoly = QRUtil.getErrorCorrectPolynomial(ecCount);\n        var rawPoly = qrPolynomial(dcdata[r], rsPoly.getLength() - 1);\n        var modPoly = rawPoly.mod(rsPoly);\n        ecdata[r] = new Array(rsPoly.getLength() - 1);\n        for (var i = 0; i < ecdata[r].length; i += 1) {\n          var modIndex = i + modPoly.getLength() - ecdata[r].length;\n          ecdata[r][i] = modIndex >= 0 ? modPoly.getAt(modIndex) : 0;\n        }\n      }\n      var totalCodeCount = 0;\n      for (var i = 0; i < rsBlocks.length; i += 1) {\n        totalCodeCount += rsBlocks[i].totalCount;\n      }\n      var data = new Array(totalCodeCount);\n      var index = 0;\n      for (var i = 0; i < maxDcCount; i += 1) {\n        for (var r = 0; r < rsBlocks.length; r += 1) {\n          if (i < dcdata[r].length) {\n            data[index] = dcdata[r][i];\n            index += 1;\n          }\n        }\n      }\n      for (var i = 0; i < maxEcCount; i += 1) {\n        for (var r = 0; r < rsBlocks.length; r += 1) {\n          if (i < ecdata[r].length) {\n            data[index] = ecdata[r][i];\n            index += 1;\n          }\n        }\n      }\n      return data;\n    };\n    var createData = function (typeNumber, errorCorrectionLevel, dataList) {\n      var rsBlocks = QRRSBlock.getRSBlocks(typeNumber, errorCorrectionLevel);\n      var buffer = qrBitBuffer();\n      for (var i = 0; i < dataList.length; i += 1) {\n        var data = dataList[i];\n        buffer.put(data.getMode(), 4);\n        buffer.put(data.getLength(), QRUtil.getLengthInBits(data.getMode(), typeNumber));\n        data.write(buffer);\n      }\n\n      // calc num max data.\n      var totalDataCount = 0;\n      for (var i = 0; i < rsBlocks.length; i += 1) {\n        totalDataCount += rsBlocks[i].dataCount;\n      }\n      if (buffer.getLengthInBits() > totalDataCount * 8) {\n        throw 'code length overflow. (' + buffer.getLengthInBits() + '>' + totalDataCount * 8 + ')';\n      }\n\n      // end code\n      if (buffer.getLengthInBits() + 4 <= totalDataCount * 8) {\n        buffer.put(0, 4);\n      }\n\n      // padding\n      while (buffer.getLengthInBits() % 8 != 0) {\n        buffer.putBit(false);\n      }\n\n      // padding\n      while (true) {\n        if (buffer.getLengthInBits() >= totalDataCount * 8) {\n          break;\n        }\n        buffer.put(PAD0, 8);\n        if (buffer.getLengthInBits() >= totalDataCount * 8) {\n          break;\n        }\n        buffer.put(PAD1, 8);\n      }\n      return createBytes(buffer, rsBlocks);\n    };\n    _this.addData = function (data, mode) {\n      mode = mode || 'Byte';\n      var newData = null;\n      switch (mode) {\n        case 'Numeric':\n          newData = qrNumber(data);\n          break;\n        case 'Alphanumeric':\n          newData = qrAlphaNum(data);\n          break;\n        case 'Byte':\n          newData = qr8BitByte(data);\n          break;\n        case 'Kanji':\n          newData = qrKanji(data);\n          break;\n        default:\n          throw 'mode:' + mode;\n      }\n      _dataList.push(newData);\n      _dataCache = null;\n    };\n    _this.isDark = function (row, col) {\n      if (row < 0 || _moduleCount <= row || col < 0 || _moduleCount <= col) {\n        throw row + ',' + col;\n      }\n      return _modules[row][col];\n    };\n    _this.getModuleCount = function () {\n      return _moduleCount;\n    };\n    _this.make = function () {\n      if (_typeNumber < 1) {\n        var typeNumber = 1;\n        for (; typeNumber < 40; typeNumber++) {\n          var rsBlocks = QRRSBlock.getRSBlocks(typeNumber, _errorCorrectionLevel);\n          var buffer = qrBitBuffer();\n          for (var i = 0; i < _dataList.length; i++) {\n            var data = _dataList[i];\n            buffer.put(data.getMode(), 4);\n            buffer.put(data.getLength(), QRUtil.getLengthInBits(data.getMode(), typeNumber));\n            data.write(buffer);\n          }\n          var totalDataCount = 0;\n          for (var i = 0; i < rsBlocks.length; i++) {\n            totalDataCount += rsBlocks[i].dataCount;\n          }\n          if (buffer.getLengthInBits() <= totalDataCount * 8) {\n            break;\n          }\n        }\n        _typeNumber = typeNumber;\n      }\n      makeImpl(false, getBestMaskPattern());\n    };\n    _this.createTableTag = function (cellSize, margin) {\n      cellSize = cellSize || 2;\n      margin = typeof margin == 'undefined' ? cellSize * 4 : margin;\n      var qrHtml = '';\n      qrHtml += '<table style=\"';\n      qrHtml += ' border-width: 0px; border-style: none;';\n      qrHtml += ' border-collapse: collapse;';\n      qrHtml += ' padding: 0px; margin: ' + margin + 'px;';\n      qrHtml += '\">';\n      qrHtml += '<tbody>';\n      for (var r = 0; r < _this.getModuleCount(); r += 1) {\n        qrHtml += '<tr>';\n        for (var c = 0; c < _this.getModuleCount(); c += 1) {\n          qrHtml += '<td style=\"';\n          qrHtml += ' border-width: 0px; border-style: none;';\n          qrHtml += ' border-collapse: collapse;';\n          qrHtml += ' padding: 0px; margin: 0px;';\n          qrHtml += ' width: ' + cellSize + 'px;';\n          qrHtml += ' height: ' + cellSize + 'px;';\n          qrHtml += ' background-color: ';\n          qrHtml += _this.isDark(r, c) ? '#000000' : '#ffffff';\n          qrHtml += ';';\n          qrHtml += '\"/>';\n        }\n        qrHtml += '</tr>';\n      }\n      qrHtml += '</tbody>';\n      qrHtml += '</table>';\n      return qrHtml;\n    };\n    _this.createSvgTag = function (cellSize, margin, alt, title) {\n      var opts = {};\n      if (typeof arguments[0] == 'object') {\n        // Called by options.\n        opts = arguments[0];\n        // overwrite cellSize and margin.\n        cellSize = opts.cellSize;\n        margin = opts.margin;\n        alt = opts.alt;\n        title = opts.title;\n      }\n      cellSize = cellSize || 2;\n      margin = typeof margin == 'undefined' ? cellSize * 4 : margin;\n\n      // Compose alt property surrogate\n      alt = typeof alt === 'string' ? {\n        text: alt\n      } : alt || {};\n      alt.text = alt.text || null;\n      alt.id = alt.text ? alt.id || 'qrcode-description' : null;\n\n      // Compose title property surrogate\n      title = typeof title === 'string' ? {\n        text: title\n      } : title || {};\n      title.text = title.text || null;\n      title.id = title.text ? title.id || 'qrcode-title' : null;\n      var size = _this.getModuleCount() * cellSize + margin * 2;\n      var c,\n        mc,\n        r,\n        mr,\n        qrSvg = '',\n        rect;\n      rect = 'l' + cellSize + ',0 0,' + cellSize + ' -' + cellSize + ',0 0,-' + cellSize + 'z ';\n      qrSvg += '<svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\"';\n      qrSvg += !opts.scalable ? ' width=\"' + size + 'px\" height=\"' + size + 'px\"' : '';\n      qrSvg += ' viewBox=\"0 0 ' + size + ' ' + size + '\" ';\n      qrSvg += ' preserveAspectRatio=\"xMinYMin meet\"';\n      qrSvg += title.text || alt.text ? ' role=\"img\" aria-labelledby=\"' + escapeXml([title.id, alt.id].join(' ').trim()) + '\"' : '';\n      qrSvg += '>';\n      qrSvg += title.text ? '<title id=\"' + escapeXml(title.id) + '\">' + escapeXml(title.text) + '</title>' : '';\n      qrSvg += alt.text ? '<description id=\"' + escapeXml(alt.id) + '\">' + escapeXml(alt.text) + '</description>' : '';\n      qrSvg += '<rect width=\"100%\" height=\"100%\" fill=\"white\" cx=\"0\" cy=\"0\"/>';\n      qrSvg += '<path d=\"';\n      for (r = 0; r < _this.getModuleCount(); r += 1) {\n        mr = r * cellSize + margin;\n        for (c = 0; c < _this.getModuleCount(); c += 1) {\n          if (_this.isDark(r, c)) {\n            mc = c * cellSize + margin;\n            qrSvg += 'M' + mc + ',' + mr + rect;\n          }\n        }\n      }\n      qrSvg += '\" stroke=\"transparent\" fill=\"black\"/>';\n      qrSvg += '</svg>';\n      return qrSvg;\n    };\n    _this.createDataURL = function (cellSize, margin) {\n      cellSize = cellSize || 2;\n      margin = typeof margin == 'undefined' ? cellSize * 4 : margin;\n      var size = _this.getModuleCount() * cellSize + margin * 2;\n      var min = margin;\n      var max = size - margin;\n      return createDataURL(size, size, function (x, y) {\n        if (min <= x && x < max && min <= y && y < max) {\n          var c = Math.floor((x - min) / cellSize);\n          var r = Math.floor((y - min) / cellSize);\n          return _this.isDark(r, c) ? 0 : 1;\n        } else {\n          return 1;\n        }\n      });\n    };\n    _this.createImgTag = function (cellSize, margin, alt) {\n      cellSize = cellSize || 2;\n      margin = typeof margin == 'undefined' ? cellSize * 4 : margin;\n      var size = _this.getModuleCount() * cellSize + margin * 2;\n      var img = '';\n      img += '<img';\n      img += '\\u0020src=\"';\n      img += _this.createDataURL(cellSize, margin);\n      img += '\"';\n      img += '\\u0020width=\"';\n      img += size;\n      img += '\"';\n      img += '\\u0020height=\"';\n      img += size;\n      img += '\"';\n      if (alt) {\n        img += '\\u0020alt=\"';\n        img += escapeXml(alt);\n        img += '\"';\n      }\n      img += '/>';\n      return img;\n    };\n    var escapeXml = function (s) {\n      var escaped = '';\n      for (var i = 0; i < s.length; i += 1) {\n        var c = s.charAt(i);\n        switch (c) {\n          case '<':\n            escaped += '&lt;';\n            break;\n          case '>':\n            escaped += '&gt;';\n            break;\n          case '&':\n            escaped += '&amp;';\n            break;\n          case '\"':\n            escaped += '&quot;';\n            break;\n          default:\n            escaped += c;\n            break;\n        }\n      }\n      return escaped;\n    };\n    var _createHalfASCII = function (margin) {\n      var cellSize = 1;\n      margin = typeof margin == 'undefined' ? cellSize * 2 : margin;\n      var size = _this.getModuleCount() * cellSize + margin * 2;\n      var min = margin;\n      var max = size - margin;\n      var y, x, r1, r2, p;\n      var blocks = {\n        '██': '█',\n        '█ ': '▀',\n        ' █': '▄',\n        '  ': ' '\n      };\n      var blocksLastLineNoMargin = {\n        '██': '▀',\n        '█ ': '▀',\n        ' █': ' ',\n        '  ': ' '\n      };\n      var ascii = '';\n      for (y = 0; y < size; y += 2) {\n        r1 = Math.floor((y - min) / cellSize);\n        r2 = Math.floor((y + 1 - min) / cellSize);\n        for (x = 0; x < size; x += 1) {\n          p = '█';\n          if (min <= x && x < max && min <= y && y < max && _this.isDark(r1, Math.floor((x - min) / cellSize))) {\n            p = ' ';\n          }\n          if (min <= x && x < max && min <= y + 1 && y + 1 < max && _this.isDark(r2, Math.floor((x - min) / cellSize))) {\n            p += ' ';\n          } else {\n            p += '█';\n          }\n\n          // Output 2 characters per pixel, to create full square. 1 character per pixels gives only half width of square.\n          ascii += margin < 1 && y + 1 >= max ? blocksLastLineNoMargin[p] : blocks[p];\n        }\n        ascii += '\\n';\n      }\n      if (size % 2 && margin > 0) {\n        return ascii.substring(0, ascii.length - size - 1) + Array(size + 1).join('▀');\n      }\n      return ascii.substring(0, ascii.length - 1);\n    };\n    _this.createASCII = function (cellSize, margin) {\n      cellSize = cellSize || 1;\n      if (cellSize < 2) {\n        return _createHalfASCII(margin);\n      }\n      cellSize -= 1;\n      margin = typeof margin == 'undefined' ? cellSize * 2 : margin;\n      var size = _this.getModuleCount() * cellSize + margin * 2;\n      var min = margin;\n      var max = size - margin;\n      var y, x, r, p;\n      var white = Array(cellSize + 1).join('██');\n      var black = Array(cellSize + 1).join('  ');\n      var ascii = '';\n      var line = '';\n      for (y = 0; y < size; y += 1) {\n        r = Math.floor((y - min) / cellSize);\n        line = '';\n        for (x = 0; x < size; x += 1) {\n          p = 1;\n          if (min <= x && x < max && min <= y && y < max && _this.isDark(r, Math.floor((x - min) / cellSize))) {\n            p = 0;\n          }\n\n          // Output 2 characters per pixel, to create full square. 1 character per pixels gives only half width of square.\n          line += p ? white : black;\n        }\n        for (r = 0; r < cellSize; r += 1) {\n          ascii += line + '\\n';\n        }\n      }\n      return ascii.substring(0, ascii.length - 1);\n    };\n    _this.renderTo2dContext = function (context, cellSize) {\n      cellSize = cellSize || 2;\n      var length = _this.getModuleCount();\n      for (var row = 0; row < length; row++) {\n        for (var col = 0; col < length; col++) {\n          context.fillStyle = _this.isDark(row, col) ? 'black' : 'white';\n          context.fillRect(row * cellSize, col * cellSize, cellSize, cellSize);\n        }\n      }\n    };\n    return _this;\n  };\n\n  //---------------------------------------------------------------------\n  // qrcode.stringToBytes\n  //---------------------------------------------------------------------\n\n  qrcode.stringToBytesFuncs = {\n    'default': function (s) {\n      var bytes = [];\n      for (var i = 0; i < s.length; i += 1) {\n        var c = s.charCodeAt(i);\n        bytes.push(c & 0xff);\n      }\n      return bytes;\n    }\n  };\n  qrcode.stringToBytes = qrcode.stringToBytesFuncs['default'];\n\n  //---------------------------------------------------------------------\n  // qrcode.createStringToBytes\n  //---------------------------------------------------------------------\n\n  /**\n   * @param unicodeData base64 string of byte array.\n   * [16bit Unicode],[16bit Bytes], ...\n   * @param numChars\n   */\n  qrcode.createStringToBytes = function (unicodeData, numChars) {\n    // create conversion map.\n\n    var unicodeMap = function () {\n      var bin = base64DecodeInputStream(unicodeData);\n      var read = function () {\n        var b = bin.read();\n        if (b == -1) throw 'eof';\n        return b;\n      };\n      var count = 0;\n      var unicodeMap = {};\n      while (true) {\n        var b0 = bin.read();\n        if (b0 == -1) break;\n        var b1 = read();\n        var b2 = read();\n        var b3 = read();\n        var k = String.fromCharCode(b0 << 8 | b1);\n        var v = b2 << 8 | b3;\n        unicodeMap[k] = v;\n        count += 1;\n      }\n      if (count != numChars) {\n        throw count + ' != ' + numChars;\n      }\n      return unicodeMap;\n    }();\n    var unknownChar = '?'.charCodeAt(0);\n    return function (s) {\n      var bytes = [];\n      for (var i = 0; i < s.length; i += 1) {\n        var c = s.charCodeAt(i);\n        if (c < 128) {\n          bytes.push(c);\n        } else {\n          var b = unicodeMap[s.charAt(i)];\n          if (typeof b == 'number') {\n            if ((b & 0xff) == b) {\n              // 1byte\n              bytes.push(b);\n            } else {\n              // 2bytes\n              bytes.push(b >>> 8);\n              bytes.push(b & 0xff);\n            }\n          } else {\n            bytes.push(unknownChar);\n          }\n        }\n      }\n      return bytes;\n    };\n  };\n\n  //---------------------------------------------------------------------\n  // QRMode\n  //---------------------------------------------------------------------\n\n  var QRMode = {\n    MODE_NUMBER: 1 << 0,\n    MODE_ALPHA_NUM: 1 << 1,\n    MODE_8BIT_BYTE: 1 << 2,\n    MODE_KANJI: 1 << 3\n  };\n\n  //---------------------------------------------------------------------\n  // QRErrorCorrectionLevel\n  //---------------------------------------------------------------------\n\n  var QRErrorCorrectionLevel = {\n    L: 1,\n    M: 0,\n    Q: 3,\n    H: 2\n  };\n\n  //---------------------------------------------------------------------\n  // QRMaskPattern\n  //---------------------------------------------------------------------\n\n  var QRMaskPattern = {\n    PATTERN000: 0,\n    PATTERN001: 1,\n    PATTERN010: 2,\n    PATTERN011: 3,\n    PATTERN100: 4,\n    PATTERN101: 5,\n    PATTERN110: 6,\n    PATTERN111: 7\n  };\n\n  //---------------------------------------------------------------------\n  // QRUtil\n  //---------------------------------------------------------------------\n\n  var QRUtil = function () {\n    var PATTERN_POSITION_TABLE = [[], [6, 18], [6, 22], [6, 26], [6, 30], [6, 34], [6, 22, 38], [6, 24, 42], [6, 26, 46], [6, 28, 50], [6, 30, 54], [6, 32, 58], [6, 34, 62], [6, 26, 46, 66], [6, 26, 48, 70], [6, 26, 50, 74], [6, 30, 54, 78], [6, 30, 56, 82], [6, 30, 58, 86], [6, 34, 62, 90], [6, 28, 50, 72, 94], [6, 26, 50, 74, 98], [6, 30, 54, 78, 102], [6, 28, 54, 80, 106], [6, 32, 58, 84, 110], [6, 30, 58, 86, 114], [6, 34, 62, 90, 118], [6, 26, 50, 74, 98, 122], [6, 30, 54, 78, 102, 126], [6, 26, 52, 78, 104, 130], [6, 30, 56, 82, 108, 134], [6, 34, 60, 86, 112, 138], [6, 30, 58, 86, 114, 142], [6, 34, 62, 90, 118, 146], [6, 30, 54, 78, 102, 126, 150], [6, 24, 50, 76, 102, 128, 154], [6, 28, 54, 80, 106, 132, 158], [6, 32, 58, 84, 110, 136, 162], [6, 26, 54, 82, 110, 138, 166], [6, 30, 58, 86, 114, 142, 170]];\n    var G15 = 1 << 10 | 1 << 8 | 1 << 5 | 1 << 4 | 1 << 2 | 1 << 1 | 1 << 0;\n    var G18 = 1 << 12 | 1 << 11 | 1 << 10 | 1 << 9 | 1 << 8 | 1 << 5 | 1 << 2 | 1 << 0;\n    var G15_MASK = 1 << 14 | 1 << 12 | 1 << 10 | 1 << 4 | 1 << 1;\n    var _this = {};\n    var getBCHDigit = function (data) {\n      var digit = 0;\n      while (data != 0) {\n        digit += 1;\n        data >>>= 1;\n      }\n      return digit;\n    };\n    _this.getBCHTypeInfo = function (data) {\n      var d = data << 10;\n      while (getBCHDigit(d) - getBCHDigit(G15) >= 0) {\n        d ^= G15 << getBCHDigit(d) - getBCHDigit(G15);\n      }\n      return (data << 10 | d) ^ G15_MASK;\n    };\n    _this.getBCHTypeNumber = function (data) {\n      var d = data << 12;\n      while (getBCHDigit(d) - getBCHDigit(G18) >= 0) {\n        d ^= G18 << getBCHDigit(d) - getBCHDigit(G18);\n      }\n      return data << 12 | d;\n    };\n    _this.getPatternPosition = function (typeNumber) {\n      return PATTERN_POSITION_TABLE[typeNumber - 1];\n    };\n    _this.getMaskFunction = function (maskPattern) {\n      switch (maskPattern) {\n        case QRMaskPattern.PATTERN000:\n          return function (i, j) {\n            return (i + j) % 2 == 0;\n          };\n        case QRMaskPattern.PATTERN001:\n          return function (i, j) {\n            return i % 2 == 0;\n          };\n        case QRMaskPattern.PATTERN010:\n          return function (i, j) {\n            return j % 3 == 0;\n          };\n        case QRMaskPattern.PATTERN011:\n          return function (i, j) {\n            return (i + j) % 3 == 0;\n          };\n        case QRMaskPattern.PATTERN100:\n          return function (i, j) {\n            return (Math.floor(i / 2) + Math.floor(j / 3)) % 2 == 0;\n          };\n        case QRMaskPattern.PATTERN101:\n          return function (i, j) {\n            return i * j % 2 + i * j % 3 == 0;\n          };\n        case QRMaskPattern.PATTERN110:\n          return function (i, j) {\n            return (i * j % 2 + i * j % 3) % 2 == 0;\n          };\n        case QRMaskPattern.PATTERN111:\n          return function (i, j) {\n            return (i * j % 3 + (i + j) % 2) % 2 == 0;\n          };\n        default:\n          throw 'bad maskPattern:' + maskPattern;\n      }\n    };\n    _this.getErrorCorrectPolynomial = function (errorCorrectLength) {\n      var a = qrPolynomial([1], 0);\n      for (var i = 0; i < errorCorrectLength; i += 1) {\n        a = a.multiply(qrPolynomial([1, QRMath.gexp(i)], 0));\n      }\n      return a;\n    };\n    _this.getLengthInBits = function (mode, type) {\n      if (1 <= type && type < 10) {\n        // 1 - 9\n\n        switch (mode) {\n          case QRMode.MODE_NUMBER:\n            return 10;\n          case QRMode.MODE_ALPHA_NUM:\n            return 9;\n          case QRMode.MODE_8BIT_BYTE:\n            return 8;\n          case QRMode.MODE_KANJI:\n            return 8;\n          default:\n            throw 'mode:' + mode;\n        }\n      } else if (type < 27) {\n        // 10 - 26\n\n        switch (mode) {\n          case QRMode.MODE_NUMBER:\n            return 12;\n          case QRMode.MODE_ALPHA_NUM:\n            return 11;\n          case QRMode.MODE_8BIT_BYTE:\n            return 16;\n          case QRMode.MODE_KANJI:\n            return 10;\n          default:\n            throw 'mode:' + mode;\n        }\n      } else if (type < 41) {\n        // 27 - 40\n\n        switch (mode) {\n          case QRMode.MODE_NUMBER:\n            return 14;\n          case QRMode.MODE_ALPHA_NUM:\n            return 13;\n          case QRMode.MODE_8BIT_BYTE:\n            return 16;\n          case QRMode.MODE_KANJI:\n            return 12;\n          default:\n            throw 'mode:' + mode;\n        }\n      } else {\n        throw 'type:' + type;\n      }\n    };\n    _this.getLostPoint = function (qrcode) {\n      var moduleCount = qrcode.getModuleCount();\n      var lostPoint = 0;\n\n      // LEVEL1\n\n      for (var row = 0; row < moduleCount; row += 1) {\n        for (var col = 0; col < moduleCount; col += 1) {\n          var sameCount = 0;\n          var dark = qrcode.isDark(row, col);\n          for (var r = -1; r <= 1; r += 1) {\n            if (row + r < 0 || moduleCount <= row + r) {\n              continue;\n            }\n            for (var c = -1; c <= 1; c += 1) {\n              if (col + c < 0 || moduleCount <= col + c) {\n                continue;\n              }\n              if (r == 0 && c == 0) {\n                continue;\n              }\n              if (dark == qrcode.isDark(row + r, col + c)) {\n                sameCount += 1;\n              }\n            }\n          }\n          if (sameCount > 5) {\n            lostPoint += 3 + sameCount - 5;\n          }\n        }\n      }\n      ;\n\n      // LEVEL2\n\n      for (var row = 0; row < moduleCount - 1; row += 1) {\n        for (var col = 0; col < moduleCount - 1; col += 1) {\n          var count = 0;\n          if (qrcode.isDark(row, col)) count += 1;\n          if (qrcode.isDark(row + 1, col)) count += 1;\n          if (qrcode.isDark(row, col + 1)) count += 1;\n          if (qrcode.isDark(row + 1, col + 1)) count += 1;\n          if (count == 0 || count == 4) {\n            lostPoint += 3;\n          }\n        }\n      }\n\n      // LEVEL3\n\n      for (var row = 0; row < moduleCount; row += 1) {\n        for (var col = 0; col < moduleCount - 6; col += 1) {\n          if (qrcode.isDark(row, col) && !qrcode.isDark(row, col + 1) && qrcode.isDark(row, col + 2) && qrcode.isDark(row, col + 3) && qrcode.isDark(row, col + 4) && !qrcode.isDark(row, col + 5) && qrcode.isDark(row, col + 6)) {\n            lostPoint += 40;\n          }\n        }\n      }\n      for (var col = 0; col < moduleCount; col += 1) {\n        for (var row = 0; row < moduleCount - 6; row += 1) {\n          if (qrcode.isDark(row, col) && !qrcode.isDark(row + 1, col) && qrcode.isDark(row + 2, col) && qrcode.isDark(row + 3, col) && qrcode.isDark(row + 4, col) && !qrcode.isDark(row + 5, col) && qrcode.isDark(row + 6, col)) {\n            lostPoint += 40;\n          }\n        }\n      }\n\n      // LEVEL4\n\n      var darkCount = 0;\n      for (var col = 0; col < moduleCount; col += 1) {\n        for (var row = 0; row < moduleCount; row += 1) {\n          if (qrcode.isDark(row, col)) {\n            darkCount += 1;\n          }\n        }\n      }\n      var ratio = Math.abs(100 * darkCount / moduleCount / moduleCount - 50) / 5;\n      lostPoint += ratio * 10;\n      return lostPoint;\n    };\n    return _this;\n  }();\n\n  //---------------------------------------------------------------------\n  // QRMath\n  //---------------------------------------------------------------------\n\n  var QRMath = function () {\n    var EXP_TABLE = new Array(256);\n    var LOG_TABLE = new Array(256);\n\n    // initialize tables\n    for (var i = 0; i < 8; i += 1) {\n      EXP_TABLE[i] = 1 << i;\n    }\n    for (var i = 8; i < 256; i += 1) {\n      EXP_TABLE[i] = EXP_TABLE[i - 4] ^ EXP_TABLE[i - 5] ^ EXP_TABLE[i - 6] ^ EXP_TABLE[i - 8];\n    }\n    for (var i = 0; i < 255; i += 1) {\n      LOG_TABLE[EXP_TABLE[i]] = i;\n    }\n    var _this = {};\n    _this.glog = function (n) {\n      if (n < 1) {\n        throw 'glog(' + n + ')';\n      }\n      return LOG_TABLE[n];\n    };\n    _this.gexp = function (n) {\n      while (n < 0) {\n        n += 255;\n      }\n      while (n >= 256) {\n        n -= 255;\n      }\n      return EXP_TABLE[n];\n    };\n    return _this;\n  }();\n\n  //---------------------------------------------------------------------\n  // qrPolynomial\n  //---------------------------------------------------------------------\n\n  function qrPolynomial(num, shift) {\n    if (typeof num.length == 'undefined') {\n      throw num.length + '/' + shift;\n    }\n    var _num = function () {\n      var offset = 0;\n      while (offset < num.length && num[offset] == 0) {\n        offset += 1;\n      }\n      var _num = new Array(num.length - offset + shift);\n      for (var i = 0; i < num.length - offset; i += 1) {\n        _num[i] = num[i + offset];\n      }\n      return _num;\n    }();\n    var _this = {};\n    _this.getAt = function (index) {\n      return _num[index];\n    };\n    _this.getLength = function () {\n      return _num.length;\n    };\n    _this.multiply = function (e) {\n      var num = new Array(_this.getLength() + e.getLength() - 1);\n      for (var i = 0; i < _this.getLength(); i += 1) {\n        for (var j = 0; j < e.getLength(); j += 1) {\n          num[i + j] ^= QRMath.gexp(QRMath.glog(_this.getAt(i)) + QRMath.glog(e.getAt(j)));\n        }\n      }\n      return qrPolynomial(num, 0);\n    };\n    _this.mod = function (e) {\n      if (_this.getLength() - e.getLength() < 0) {\n        return _this;\n      }\n      var ratio = QRMath.glog(_this.getAt(0)) - QRMath.glog(e.getAt(0));\n      var num = new Array(_this.getLength());\n      for (var i = 0; i < _this.getLength(); i += 1) {\n        num[i] = _this.getAt(i);\n      }\n      for (var i = 0; i < e.getLength(); i += 1) {\n        num[i] ^= QRMath.gexp(QRMath.glog(e.getAt(i)) + ratio);\n      }\n\n      // recursive call\n      return qrPolynomial(num, 0).mod(e);\n    };\n    return _this;\n  }\n  ;\n\n  //---------------------------------------------------------------------\n  // QRRSBlock\n  //---------------------------------------------------------------------\n\n  var QRRSBlock = function () {\n    var RS_BLOCK_TABLE = [\n    // L\n    // M\n    // Q\n    // H\n\n    // 1\n    [1, 26, 19], [1, 26, 16], [1, 26, 13], [1, 26, 9],\n    // 2\n    [1, 44, 34], [1, 44, 28], [1, 44, 22], [1, 44, 16],\n    // 3\n    [1, 70, 55], [1, 70, 44], [2, 35, 17], [2, 35, 13],\n    // 4\n    [1, 100, 80], [2, 50, 32], [2, 50, 24], [4, 25, 9],\n    // 5\n    [1, 134, 108], [2, 67, 43], [2, 33, 15, 2, 34, 16], [2, 33, 11, 2, 34, 12],\n    // 6\n    [2, 86, 68], [4, 43, 27], [4, 43, 19], [4, 43, 15],\n    // 7\n    [2, 98, 78], [4, 49, 31], [2, 32, 14, 4, 33, 15], [4, 39, 13, 1, 40, 14],\n    // 8\n    [2, 121, 97], [2, 60, 38, 2, 61, 39], [4, 40, 18, 2, 41, 19], [4, 40, 14, 2, 41, 15],\n    // 9\n    [2, 146, 116], [3, 58, 36, 2, 59, 37], [4, 36, 16, 4, 37, 17], [4, 36, 12, 4, 37, 13],\n    // 10\n    [2, 86, 68, 2, 87, 69], [4, 69, 43, 1, 70, 44], [6, 43, 19, 2, 44, 20], [6, 43, 15, 2, 44, 16],\n    // 11\n    [4, 101, 81], [1, 80, 50, 4, 81, 51], [4, 50, 22, 4, 51, 23], [3, 36, 12, 8, 37, 13],\n    // 12\n    [2, 116, 92, 2, 117, 93], [6, 58, 36, 2, 59, 37], [4, 46, 20, 6, 47, 21], [7, 42, 14, 4, 43, 15],\n    // 13\n    [4, 133, 107], [8, 59, 37, 1, 60, 38], [8, 44, 20, 4, 45, 21], [12, 33, 11, 4, 34, 12],\n    // 14\n    [3, 145, 115, 1, 146, 116], [4, 64, 40, 5, 65, 41], [11, 36, 16, 5, 37, 17], [11, 36, 12, 5, 37, 13],\n    // 15\n    [5, 109, 87, 1, 110, 88], [5, 65, 41, 5, 66, 42], [5, 54, 24, 7, 55, 25], [11, 36, 12, 7, 37, 13],\n    // 16\n    [5, 122, 98, 1, 123, 99], [7, 73, 45, 3, 74, 46], [15, 43, 19, 2, 44, 20], [3, 45, 15, 13, 46, 16],\n    // 17\n    [1, 135, 107, 5, 136, 108], [10, 74, 46, 1, 75, 47], [1, 50, 22, 15, 51, 23], [2, 42, 14, 17, 43, 15],\n    // 18\n    [5, 150, 120, 1, 151, 121], [9, 69, 43, 4, 70, 44], [17, 50, 22, 1, 51, 23], [2, 42, 14, 19, 43, 15],\n    // 19\n    [3, 141, 113, 4, 142, 114], [3, 70, 44, 11, 71, 45], [17, 47, 21, 4, 48, 22], [9, 39, 13, 16, 40, 14],\n    // 20\n    [3, 135, 107, 5, 136, 108], [3, 67, 41, 13, 68, 42], [15, 54, 24, 5, 55, 25], [15, 43, 15, 10, 44, 16],\n    // 21\n    [4, 144, 116, 4, 145, 117], [17, 68, 42], [17, 50, 22, 6, 51, 23], [19, 46, 16, 6, 47, 17],\n    // 22\n    [2, 139, 111, 7, 140, 112], [17, 74, 46], [7, 54, 24, 16, 55, 25], [34, 37, 13],\n    // 23\n    [4, 151, 121, 5, 152, 122], [4, 75, 47, 14, 76, 48], [11, 54, 24, 14, 55, 25], [16, 45, 15, 14, 46, 16],\n    // 24\n    [6, 147, 117, 4, 148, 118], [6, 73, 45, 14, 74, 46], [11, 54, 24, 16, 55, 25], [30, 46, 16, 2, 47, 17],\n    // 25\n    [8, 132, 106, 4, 133, 107], [8, 75, 47, 13, 76, 48], [7, 54, 24, 22, 55, 25], [22, 45, 15, 13, 46, 16],\n    // 26\n    [10, 142, 114, 2, 143, 115], [19, 74, 46, 4, 75, 47], [28, 50, 22, 6, 51, 23], [33, 46, 16, 4, 47, 17],\n    // 27\n    [8, 152, 122, 4, 153, 123], [22, 73, 45, 3, 74, 46], [8, 53, 23, 26, 54, 24], [12, 45, 15, 28, 46, 16],\n    // 28\n    [3, 147, 117, 10, 148, 118], [3, 73, 45, 23, 74, 46], [4, 54, 24, 31, 55, 25], [11, 45, 15, 31, 46, 16],\n    // 29\n    [7, 146, 116, 7, 147, 117], [21, 73, 45, 7, 74, 46], [1, 53, 23, 37, 54, 24], [19, 45, 15, 26, 46, 16],\n    // 30\n    [5, 145, 115, 10, 146, 116], [19, 75, 47, 10, 76, 48], [15, 54, 24, 25, 55, 25], [23, 45, 15, 25, 46, 16],\n    // 31\n    [13, 145, 115, 3, 146, 116], [2, 74, 46, 29, 75, 47], [42, 54, 24, 1, 55, 25], [23, 45, 15, 28, 46, 16],\n    // 32\n    [17, 145, 115], [10, 74, 46, 23, 75, 47], [10, 54, 24, 35, 55, 25], [19, 45, 15, 35, 46, 16],\n    // 33\n    [17, 145, 115, 1, 146, 116], [14, 74, 46, 21, 75, 47], [29, 54, 24, 19, 55, 25], [11, 45, 15, 46, 46, 16],\n    // 34\n    [13, 145, 115, 6, 146, 116], [14, 74, 46, 23, 75, 47], [44, 54, 24, 7, 55, 25], [59, 46, 16, 1, 47, 17],\n    // 35\n    [12, 151, 121, 7, 152, 122], [12, 75, 47, 26, 76, 48], [39, 54, 24, 14, 55, 25], [22, 45, 15, 41, 46, 16],\n    // 36\n    [6, 151, 121, 14, 152, 122], [6, 75, 47, 34, 76, 48], [46, 54, 24, 10, 55, 25], [2, 45, 15, 64, 46, 16],\n    // 37\n    [17, 152, 122, 4, 153, 123], [29, 74, 46, 14, 75, 47], [49, 54, 24, 10, 55, 25], [24, 45, 15, 46, 46, 16],\n    // 38\n    [4, 152, 122, 18, 153, 123], [13, 74, 46, 32, 75, 47], [48, 54, 24, 14, 55, 25], [42, 45, 15, 32, 46, 16],\n    // 39\n    [20, 147, 117, 4, 148, 118], [40, 75, 47, 7, 76, 48], [43, 54, 24, 22, 55, 25], [10, 45, 15, 67, 46, 16],\n    // 40\n    [19, 148, 118, 6, 149, 119], [18, 75, 47, 31, 76, 48], [34, 54, 24, 34, 55, 25], [20, 45, 15, 61, 46, 16]];\n    var qrRSBlock = function (totalCount, dataCount) {\n      var _this = {};\n      _this.totalCount = totalCount;\n      _this.dataCount = dataCount;\n      return _this;\n    };\n    var _this = {};\n    var getRsBlockTable = function (typeNumber, errorCorrectionLevel) {\n      switch (errorCorrectionLevel) {\n        case QRErrorCorrectionLevel.L:\n          return RS_BLOCK_TABLE[(typeNumber - 1) * 4 + 0];\n        case QRErrorCorrectionLevel.M:\n          return RS_BLOCK_TABLE[(typeNumber - 1) * 4 + 1];\n        case QRErrorCorrectionLevel.Q:\n          return RS_BLOCK_TABLE[(typeNumber - 1) * 4 + 2];\n        case QRErrorCorrectionLevel.H:\n          return RS_BLOCK_TABLE[(typeNumber - 1) * 4 + 3];\n        default:\n          return undefined;\n      }\n    };\n    _this.getRSBlocks = function (typeNumber, errorCorrectionLevel) {\n      var rsBlock = getRsBlockTable(typeNumber, errorCorrectionLevel);\n      if (typeof rsBlock == 'undefined') {\n        throw 'bad rs block @ typeNumber:' + typeNumber + '/errorCorrectionLevel:' + errorCorrectionLevel;\n      }\n      var length = rsBlock.length / 3;\n      var list = [];\n      for (var i = 0; i < length; i += 1) {\n        var count = rsBlock[i * 3 + 0];\n        var totalCount = rsBlock[i * 3 + 1];\n        var dataCount = rsBlock[i * 3 + 2];\n        for (var j = 0; j < count; j += 1) {\n          list.push(qrRSBlock(totalCount, dataCount));\n        }\n      }\n      return list;\n    };\n    return _this;\n  }();\n\n  //---------------------------------------------------------------------\n  // qrBitBuffer\n  //---------------------------------------------------------------------\n\n  var qrBitBuffer = function () {\n    var _buffer = [];\n    var _length = 0;\n    var _this = {};\n    _this.getBuffer = function () {\n      return _buffer;\n    };\n    _this.getAt = function (index) {\n      var bufIndex = Math.floor(index / 8);\n      return (_buffer[bufIndex] >>> 7 - index % 8 & 1) == 1;\n    };\n    _this.put = function (num, length) {\n      for (var i = 0; i < length; i += 1) {\n        _this.putBit((num >>> length - i - 1 & 1) == 1);\n      }\n    };\n    _this.getLengthInBits = function () {\n      return _length;\n    };\n    _this.putBit = function (bit) {\n      var bufIndex = Math.floor(_length / 8);\n      if (_buffer.length <= bufIndex) {\n        _buffer.push(0);\n      }\n      if (bit) {\n        _buffer[bufIndex] |= 0x80 >>> _length % 8;\n      }\n      _length += 1;\n    };\n    return _this;\n  };\n\n  //---------------------------------------------------------------------\n  // qrNumber\n  //---------------------------------------------------------------------\n\n  var qrNumber = function (data) {\n    var _mode = QRMode.MODE_NUMBER;\n    var _data = data;\n    var _this = {};\n    _this.getMode = function () {\n      return _mode;\n    };\n    _this.getLength = function (buffer) {\n      return _data.length;\n    };\n    _this.write = function (buffer) {\n      var data = _data;\n      var i = 0;\n      while (i + 2 < data.length) {\n        buffer.put(strToNum(data.substring(i, i + 3)), 10);\n        i += 3;\n      }\n      if (i < data.length) {\n        if (data.length - i == 1) {\n          buffer.put(strToNum(data.substring(i, i + 1)), 4);\n        } else if (data.length - i == 2) {\n          buffer.put(strToNum(data.substring(i, i + 2)), 7);\n        }\n      }\n    };\n    var strToNum = function (s) {\n      var num = 0;\n      for (var i = 0; i < s.length; i += 1) {\n        num = num * 10 + chatToNum(s.charAt(i));\n      }\n      return num;\n    };\n    var chatToNum = function (c) {\n      if ('0' <= c && c <= '9') {\n        return c.charCodeAt(0) - '0'.charCodeAt(0);\n      }\n      throw 'illegal char :' + c;\n    };\n    return _this;\n  };\n\n  //---------------------------------------------------------------------\n  // qrAlphaNum\n  //---------------------------------------------------------------------\n\n  var qrAlphaNum = function (data) {\n    var _mode = QRMode.MODE_ALPHA_NUM;\n    var _data = data;\n    var _this = {};\n    _this.getMode = function () {\n      return _mode;\n    };\n    _this.getLength = function (buffer) {\n      return _data.length;\n    };\n    _this.write = function (buffer) {\n      var s = _data;\n      var i = 0;\n      while (i + 1 < s.length) {\n        buffer.put(getCode(s.charAt(i)) * 45 + getCode(s.charAt(i + 1)), 11);\n        i += 2;\n      }\n      if (i < s.length) {\n        buffer.put(getCode(s.charAt(i)), 6);\n      }\n    };\n    var getCode = function (c) {\n      if ('0' <= c && c <= '9') {\n        return c.charCodeAt(0) - '0'.charCodeAt(0);\n      } else if ('A' <= c && c <= 'Z') {\n        return c.charCodeAt(0) - 'A'.charCodeAt(0) + 10;\n      } else {\n        switch (c) {\n          case ' ':\n            return 36;\n          case '$':\n            return 37;\n          case '%':\n            return 38;\n          case '*':\n            return 39;\n          case '+':\n            return 40;\n          case '-':\n            return 41;\n          case '.':\n            return 42;\n          case '/':\n            return 43;\n          case ':':\n            return 44;\n          default:\n            throw 'illegal char :' + c;\n        }\n      }\n    };\n    return _this;\n  };\n\n  //---------------------------------------------------------------------\n  // qr8BitByte\n  //---------------------------------------------------------------------\n\n  var qr8BitByte = function (data) {\n    var _mode = QRMode.MODE_8BIT_BYTE;\n    var _data = data;\n    var _bytes = qrcode.stringToBytes(data);\n    var _this = {};\n    _this.getMode = function () {\n      return _mode;\n    };\n    _this.getLength = function (buffer) {\n      return _bytes.length;\n    };\n    _this.write = function (buffer) {\n      for (var i = 0; i < _bytes.length; i += 1) {\n        buffer.put(_bytes[i], 8);\n      }\n    };\n    return _this;\n  };\n\n  //---------------------------------------------------------------------\n  // qrKanji\n  //---------------------------------------------------------------------\n\n  var qrKanji = function (data) {\n    var _mode = QRMode.MODE_KANJI;\n    var _data = data;\n    var stringToBytes = qrcode.stringToBytesFuncs['SJIS'];\n    if (!stringToBytes) {\n      throw 'sjis not supported.';\n    }\n    !function (c, code) {\n      // self test for sjis support.\n      var test = stringToBytes(c);\n      if (test.length != 2 || (test[0] << 8 | test[1]) != code) {\n        throw 'sjis not supported.';\n      }\n    }('\\u53cb', 0x9746);\n    var _bytes = stringToBytes(data);\n    var _this = {};\n    _this.getMode = function () {\n      return _mode;\n    };\n    _this.getLength = function (buffer) {\n      return ~~(_bytes.length / 2);\n    };\n    _this.write = function (buffer) {\n      var data = _bytes;\n      var i = 0;\n      while (i + 1 < data.length) {\n        var c = (0xff & data[i]) << 8 | 0xff & data[i + 1];\n        if (0x8140 <= c && c <= 0x9FFC) {\n          c -= 0x8140;\n        } else if (0xE040 <= c && c <= 0xEBBF) {\n          c -= 0xC140;\n        } else {\n          throw 'illegal char at ' + (i + 1) + '/' + c;\n        }\n        c = (c >>> 8 & 0xff) * 0xC0 + (c & 0xff);\n        buffer.put(c, 13);\n        i += 2;\n      }\n      if (i < data.length) {\n        throw 'illegal char at ' + (i + 1);\n      }\n    };\n    return _this;\n  };\n\n  //=====================================================================\n  // GIF Support etc.\n  //\n\n  //---------------------------------------------------------------------\n  // byteArrayOutputStream\n  //---------------------------------------------------------------------\n\n  var byteArrayOutputStream = function () {\n    var _bytes = [];\n    var _this = {};\n    _this.writeByte = function (b) {\n      _bytes.push(b & 0xff);\n    };\n    _this.writeShort = function (i) {\n      _this.writeByte(i);\n      _this.writeByte(i >>> 8);\n    };\n    _this.writeBytes = function (b, off, len) {\n      off = off || 0;\n      len = len || b.length;\n      for (var i = 0; i < len; i += 1) {\n        _this.writeByte(b[i + off]);\n      }\n    };\n    _this.writeString = function (s) {\n      for (var i = 0; i < s.length; i += 1) {\n        _this.writeByte(s.charCodeAt(i));\n      }\n    };\n    _this.toByteArray = function () {\n      return _bytes;\n    };\n    _this.toString = function () {\n      var s = '';\n      s += '[';\n      for (var i = 0; i < _bytes.length; i += 1) {\n        if (i > 0) {\n          s += ',';\n        }\n        s += _bytes[i];\n      }\n      s += ']';\n      return s;\n    };\n    return _this;\n  };\n\n  //---------------------------------------------------------------------\n  // base64EncodeOutputStream\n  //---------------------------------------------------------------------\n\n  var base64EncodeOutputStream = function () {\n    var _buffer = 0;\n    var _buflen = 0;\n    var _length = 0;\n    var _base64 = '';\n    var _this = {};\n    var writeEncoded = function (b) {\n      _base64 += String.fromCharCode(encode(b & 0x3f));\n    };\n    var encode = function (n) {\n      if (n < 0) {\n        // error.\n      } else if (n < 26) {\n        return 0x41 + n;\n      } else if (n < 52) {\n        return 0x61 + (n - 26);\n      } else if (n < 62) {\n        return 0x30 + (n - 52);\n      } else if (n == 62) {\n        return 0x2b;\n      } else if (n == 63) {\n        return 0x2f;\n      }\n      throw 'n:' + n;\n    };\n    _this.writeByte = function (n) {\n      _buffer = _buffer << 8 | n & 0xff;\n      _buflen += 8;\n      _length += 1;\n      while (_buflen >= 6) {\n        writeEncoded(_buffer >>> _buflen - 6);\n        _buflen -= 6;\n      }\n    };\n    _this.flush = function () {\n      if (_buflen > 0) {\n        writeEncoded(_buffer << 6 - _buflen);\n        _buffer = 0;\n        _buflen = 0;\n      }\n      if (_length % 3 != 0) {\n        // padding\n        var padlen = 3 - _length % 3;\n        for (var i = 0; i < padlen; i += 1) {\n          _base64 += '=';\n        }\n      }\n    };\n    _this.toString = function () {\n      return _base64;\n    };\n    return _this;\n  };\n\n  //---------------------------------------------------------------------\n  // base64DecodeInputStream\n  //---------------------------------------------------------------------\n\n  var base64DecodeInputStream = function (str) {\n    var _str = str;\n    var _pos = 0;\n    var _buffer = 0;\n    var _buflen = 0;\n    var _this = {};\n    _this.read = function () {\n      while (_buflen < 8) {\n        if (_pos >= _str.length) {\n          if (_buflen == 0) {\n            return -1;\n          }\n          throw 'unexpected end of file./' + _buflen;\n        }\n        var c = _str.charAt(_pos);\n        _pos += 1;\n        if (c == '=') {\n          _buflen = 0;\n          return -1;\n        } else if (c.match(/^\\s$/)) {\n          // ignore if whitespace.\n          continue;\n        }\n        _buffer = _buffer << 6 | decode(c.charCodeAt(0));\n        _buflen += 6;\n      }\n      var n = _buffer >>> _buflen - 8 & 0xff;\n      _buflen -= 8;\n      return n;\n    };\n    var decode = function (c) {\n      if (0x41 <= c && c <= 0x5a) {\n        return c - 0x41;\n      } else if (0x61 <= c && c <= 0x7a) {\n        return c - 0x61 + 26;\n      } else if (0x30 <= c && c <= 0x39) {\n        return c - 0x30 + 52;\n      } else if (c == 0x2b) {\n        return 62;\n      } else if (c == 0x2f) {\n        return 63;\n      } else {\n        throw 'c:' + c;\n      }\n    };\n    return _this;\n  };\n\n  //---------------------------------------------------------------------\n  // gifImage (B/W)\n  //---------------------------------------------------------------------\n\n  var gifImage = function (width, height) {\n    var _width = width;\n    var _height = height;\n    var _data = new Array(width * height);\n    var _this = {};\n    _this.setPixel = function (x, y, pixel) {\n      _data[y * _width + x] = pixel;\n    };\n    _this.write = function (out) {\n      //---------------------------------\n      // GIF Signature\n\n      out.writeString('GIF87a');\n\n      //---------------------------------\n      // Screen Descriptor\n\n      out.writeShort(_width);\n      out.writeShort(_height);\n      out.writeByte(0x80); // 2bit\n      out.writeByte(0);\n      out.writeByte(0);\n\n      //---------------------------------\n      // Global Color Map\n\n      // black\n      out.writeByte(0x00);\n      out.writeByte(0x00);\n      out.writeByte(0x00);\n\n      // white\n      out.writeByte(0xff);\n      out.writeByte(0xff);\n      out.writeByte(0xff);\n\n      //---------------------------------\n      // Image Descriptor\n\n      out.writeString(',');\n      out.writeShort(0);\n      out.writeShort(0);\n      out.writeShort(_width);\n      out.writeShort(_height);\n      out.writeByte(0);\n\n      //---------------------------------\n      // Local Color Map\n\n      //---------------------------------\n      // Raster Data\n\n      var lzwMinCodeSize = 2;\n      var raster = getLZWRaster(lzwMinCodeSize);\n      out.writeByte(lzwMinCodeSize);\n      var offset = 0;\n      while (raster.length - offset > 255) {\n        out.writeByte(255);\n        out.writeBytes(raster, offset, 255);\n        offset += 255;\n      }\n      out.writeByte(raster.length - offset);\n      out.writeBytes(raster, offset, raster.length - offset);\n      out.writeByte(0x00);\n\n      //---------------------------------\n      // GIF Terminator\n      out.writeString(';');\n    };\n    var bitOutputStream = function (out) {\n      var _out = out;\n      var _bitLength = 0;\n      var _bitBuffer = 0;\n      var _this = {};\n      _this.write = function (data, length) {\n        if (data >>> length != 0) {\n          throw 'length over';\n        }\n        while (_bitLength + length >= 8) {\n          _out.writeByte(0xff & (data << _bitLength | _bitBuffer));\n          length -= 8 - _bitLength;\n          data >>>= 8 - _bitLength;\n          _bitBuffer = 0;\n          _bitLength = 0;\n        }\n        _bitBuffer = data << _bitLength | _bitBuffer;\n        _bitLength = _bitLength + length;\n      };\n      _this.flush = function () {\n        if (_bitLength > 0) {\n          _out.writeByte(_bitBuffer);\n        }\n      };\n      return _this;\n    };\n    var getLZWRaster = function (lzwMinCodeSize) {\n      var clearCode = 1 << lzwMinCodeSize;\n      var endCode = (1 << lzwMinCodeSize) + 1;\n      var bitLength = lzwMinCodeSize + 1;\n\n      // Setup LZWTable\n      var table = lzwTable();\n      for (var i = 0; i < clearCode; i += 1) {\n        table.add(String.fromCharCode(i));\n      }\n      table.add(String.fromCharCode(clearCode));\n      table.add(String.fromCharCode(endCode));\n      var byteOut = byteArrayOutputStream();\n      var bitOut = bitOutputStream(byteOut);\n\n      // clear code\n      bitOut.write(clearCode, bitLength);\n      var dataIndex = 0;\n      var s = String.fromCharCode(_data[dataIndex]);\n      dataIndex += 1;\n      while (dataIndex < _data.length) {\n        var c = String.fromCharCode(_data[dataIndex]);\n        dataIndex += 1;\n        if (table.contains(s + c)) {\n          s = s + c;\n        } else {\n          bitOut.write(table.indexOf(s), bitLength);\n          if (table.size() < 0xfff) {\n            if (table.size() == 1 << bitLength) {\n              bitLength += 1;\n            }\n            table.add(s + c);\n          }\n          s = c;\n        }\n      }\n      bitOut.write(table.indexOf(s), bitLength);\n\n      // end code\n      bitOut.write(endCode, bitLength);\n      bitOut.flush();\n      return byteOut.toByteArray();\n    };\n    var lzwTable = function () {\n      var _map = {};\n      var _size = 0;\n      var _this = {};\n      _this.add = function (key) {\n        if (_this.contains(key)) {\n          throw 'dup key:' + key;\n        }\n        _map[key] = _size;\n        _size += 1;\n      };\n      _this.size = function () {\n        return _size;\n      };\n      _this.indexOf = function (key) {\n        return _map[key];\n      };\n      _this.contains = function (key) {\n        return typeof _map[key] != 'undefined';\n      };\n      return _this;\n    };\n    return _this;\n  };\n  var createDataURL = function (width, height, getPixel) {\n    var gif = gifImage(width, height);\n    for (var y = 0; y < height; y += 1) {\n      for (var x = 0; x < width; x += 1) {\n        gif.setPixel(x, y, getPixel(x, y));\n      }\n    }\n    var b = byteArrayOutputStream();\n    gif.write(b);\n    var base64 = base64EncodeOutputStream();\n    var bytes = b.toByteArray();\n    for (var i = 0; i < bytes.length; i += 1) {\n      base64.writeByte(bytes[i]);\n    }\n    base64.flush();\n    return 'data:image/gif;base64,' + base64;\n  };\n\n  //---------------------------------------------------------------------\n  // returns qrcode function.\n\n  return qrcode;\n}();\n\n// multibyte support\n!function () {\n  qrcode.stringToBytesFuncs['UTF-8'] = function (s) {\n    // http://stackoverflow.com/questions/18729405/how-to-convert-utf8-string-to-byte-array\n    function toUTF8Array(str) {\n      var utf8 = [];\n      for (var i = 0; i < str.length; i++) {\n        var charcode = str.charCodeAt(i);\n        if (charcode < 0x80) utf8.push(charcode);else if (charcode < 0x800) {\n          utf8.push(0xc0 | charcode >> 6, 0x80 | charcode & 0x3f);\n        } else if (charcode < 0xd800 || charcode >= 0xe000) {\n          utf8.push(0xe0 | charcode >> 12, 0x80 | charcode >> 6 & 0x3f, 0x80 | charcode & 0x3f);\n        }\n        // surrogate pair\n        else {\n          i++;\n          // UTF-16 encodes 0x10000-0x10FFFF by\n          // subtracting 0x10000 and splitting the\n          // 20 bits of 0x0-0xFFFFF into two halves\n          charcode = 0x10000 + ((charcode & 0x3ff) << 10 | str.charCodeAt(i) & 0x3ff);\n          utf8.push(0xf0 | charcode >> 18, 0x80 | charcode >> 12 & 0x3f, 0x80 | charcode >> 6 & 0x3f, 0x80 | charcode & 0x3f);\n        }\n      }\n      return utf8;\n    }\n    return toUTF8Array(s);\n  };\n}();\n(function (factory) {\n  if (typeof define === 'function' && define.amd) {\n    define([], factory);\n  } else if (typeof exports === 'object') {\n    module.exports = factory();\n  }\n})(function () {\n  return qrcode;\n});"],
  "mappings": "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",
  "names": ["qrcode", "typeNumber", "errorCorrectionLevel", "unicodeMap", "_num", "num", "_this", "data"]
}
